{"version":3,"sources":["../../src/services/file.service.js"],"names":["getByUserID","user_id","File","find","getById","id","findById","canCreate","name","_id","email","userFiles","nameExists","file","log","warn","create","text","fileType","maker","PdfMaker","writeLine","save","newFile","error","remove","findByIdAndRemove","openFile","files","forEach","fs","writeFileSync","__dirname","fileBuffer","info"],"mappings":"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","sourcesContent":["import fs from 'fs';\r\nimport File from '../common-models/file';\r\nimport log from '../tools/console/logger';\r\nimport PdfMaker from '../tools/pdf-maker/pdf';\r\n\r\nconst getByUserID = async user_id => await File.find({ user_id });\r\n\r\nconst getById = async id => {\r\n  return await File.findById(id);\r\n};\r\n\r\nconst canCreate = async ({ _id, email }, name) => {\r\n  const userFiles = await getByUserID(_id);\r\n  const nameExists = userFiles.find(file => file.name === name);\r\n\r\n  if (nameExists) {\r\n    log.warn(\r\n      `User with email ${email} is trying to create same file name - ${name}`\r\n    );\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst create = async ({ _id }, name, text, fileType = 1) => {\r\n  try {\r\n    const maker = new PdfMaker(name, _id);\r\n    maker.writeLine(text);\r\n    await maker.save();\r\n\r\n    const newFile = new File({\r\n      user_id: _id,\r\n      name,\r\n      fileType\r\n      // fileBuffer: maker.pdfBuffer\r\n    });\r\n\r\n    return await newFile.save();\r\n  } catch (error) {\r\n    log.error(error);\r\n  }\r\n};\r\n\r\nconst remove = async id => {\r\n  await File.findByIdAndRemove(id);\r\n};\r\n\r\nconst openFile = async ({ _id }) => {\r\n  const files = await getByUserID(_id);\r\n  files.forEach(file => {\r\n    fs.writeFileSync(`${__dirname}/${file.name}.pdf`, file.fileBuffer);\r\n    log.info(`File [${file.name}] has been saved as pdf`);\r\n  });\r\n};\r\n\r\nexport { getByUserID, getById, canCreate, create, remove, openFile };\r\n"],"file":"file.service.js"}