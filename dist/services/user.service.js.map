{"version":3,"sources":["../../src/services/user.service.js"],"names":["getAll","User","find","select","getById","id","findById","getByEmail","email","findOne","create","password","userAlreadyExists","log","warn","newUser","register","update","user","_id","currentUser","emailAlreadyExists","Object","assign","save","updatePassword","setPassword","error","remove","findByIdAndRemove","authenticate","jwt","sign"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport User from '../common-models/user';\r\nimport log from '../tools/console/logger';\r\nimport { decryptSecret } from '../security/tokens/secret';\r\n\r\nconst getAll = async () => {\r\n  return await User.find({}).select('-hash');\r\n};\r\n\r\nconst getById = async id => {\r\n  return await User.findById(id).select('-hash');\r\n};\r\n\r\nconst getByEmail = async ({ email }) => {\r\n  return await User.findOne({ email });\r\n};\r\n\r\nconst create = async ({ email, password }) => {\r\n  const userAlreadyExists = await User.findOne({ email });\r\n  if (userAlreadyExists) {\r\n    log.warn(`User with email ${email}, already exists`);\r\n    return false;\r\n  }\r\n  const newUser = new User({\r\n    email\r\n  });\r\n  User.register(newUser, password);\r\n  return true;\r\n};\r\n\r\nconst update = async user => {\r\n  const { email, _id } = user;\r\n  const currentUser = await User.findById(_id);\r\n  const emailAlreadyExists = await User.find({ email });\r\n  if (emailAlreadyExists) {\r\n    log.warn(`User with email ${email}, already exists`);\r\n    return false;\r\n  }\r\n  Object.assign(currentUser, user);\r\n  await currentUser.save();\r\n};\r\n\r\nconst updatePassword = async (password, _id) => {\r\n  const currentUser = await User.findById(_id);\r\n  if (currentUser)\r\n    currentUser.setPassword(password, async error => {\r\n      if (error) log.error(error);\r\n      else await currentUser.save();\r\n    });\r\n};\r\n\r\nconst remove = async id => {\r\n  await User.findByIdAndRemove(id);\r\n};\r\n\r\nconst authenticate = async ({ _id }) => {\r\n  return jwt.sign({ _id: _id }, decryptSecret());\r\n};\r\n\r\nexport {\r\n  getAll,\r\n  getById,\r\n  getByEmail,\r\n  create,\r\n  update,\r\n  updatePassword,\r\n  remove,\r\n  authenticate\r\n};\r\n"],"file":"user.service.js"}