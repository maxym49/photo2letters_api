{"version":3,"sources":["../../../src/tools/ocr/ocr.js"],"names":["OCR","initProperties","pb","ProgressBar","total","_worker","logger","m","tick","progress","log","configInfo","_userName","_fileName","load","loadLanguage","_language","initialize","recognize","Buffer","from","image","text","data","terminate","console","info","language","userName","fileName","createWorker","_text","_image","fileN","userN"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;IAEqBA,G;;;AACnB,iBAAc;AAAA;;AACZ,SAAKC,cAAL;AACD;;;;mCAEc;AACb,UAAMC,EAAE,GAAG,IAAIC,oBAAJ,CAAgB,uBAAhB,EAAyC;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAzC,CAAX;AACA,WAAKC,OAAL,GAAe,6BAAa;AAC1BC,QAAAA,MAAM,EAAE,gBAAAC,CAAC,EAAI;AACXL,UAAAA,EAAE,CAACM,IAAH,CAAQD,CAAC,CAACE,QAAV,EAAoB,CAApB;AACD;AAHyB,OAAb,CAAf;AAKD;;;;;;;;;;;;;AAGCC,mCAAIC,UAAJ,iBACW,KAAKC,SADhB,4CAC2D,KAAKC,SADhE;;;uBAGM,KAAKR,OAAL,CAAaS,IAAb,E;;;;uBACA,KAAKT,OAAL,CAAaU,YAAb,CAA0B,KAAKC,SAA/B,C;;;;uBACA,KAAKX,OAAL,CAAaY,UAAb,CAAwB,KAAKD,SAA7B,C;;;;uBAGI,KAAKX,OAAL,CAAaa,SAAb,CAAuBC,MAAM,CAACC,IAAP,CAAY,KAAKC,KAAjB,EAAwB,QAAxB,CAAvB,C;;;;AADAC,gBAAAA,I,QAARC,I,CAAQD,I;AAEV,qBAAKA,IAAL,GAAYA,IAAZ;;uBACM,KAAKjB,OAAL,CAAamB,SAAb,E;;;AACNC,gBAAAA,OAAO,CAACC,IAAR;;AACAhB,mCAAIC,UAAJ,iBACW,KAAKC,SADhB,0CACyD,KAAKC,SAD9D;;;;;;;;;;;;;;;;;;qCAKe;AACf,WAAKc,QAAL,GAAgB,KAAhB;AACA,WAAKL,IAAL,GAAY,EAAZ;AACA,WAAKM,QAAL,GAAgB,EAAhB;AACA,WAAKC,QAAL,GAAgB,EAAhB;AACA,WAAKR,KAAL,GAAa,EAAb;AACA,WAAKS,YAAL;AACD;;;sBAEYH,Q,EAAU;AACrB,WAAKX,SAAL,GAAiBW,QAAjB;AACD,K;wBAkBc;AACb,aAAO,KAAKX,SAAZ;AACD;;;sBAlBQM,I,EAAM;AACb,WAAKS,KAAL,GAAaT,IAAb;AACD,K;wBAkBU;AACT,aAAO,KAAKS,KAAZ;AACD;;;sBAlBSV,K,EAAO;AACf,WAAKW,MAAL,GAAcX,KAAd;AACD,K;wBAkBW;AACV,aAAO,KAAKW,MAAZ;AACD;;;sBAlBYC,K,EAAO;AAClB,WAAKpB,SAAL,GAAiBoB,KAAjB;AACD,K;wBAkBc;AACb,aAAO,KAAKpB,SAAZ;AACD;;;sBAlBYqB,K,EAAO;AAClB,WAAKtB,SAAL,GAAiBsB,KAAjB;AACD,K;wBAkBc;AACb,aAAO,KAAKtB,SAAZ;AACD","sourcesContent":["import { createWorker } from 'tesseract.js';\r\nimport log from '../console/logger';\r\nimport ProgressBar from 'progress';\r\n\r\nexport default class OCR {\r\n  constructor() {\r\n    this.initProperties();\r\n  }\r\n\r\n  createWorker() {\r\n    const pb = new ProgressBar('[:bar] :percent :etas', { total: 100 });\r\n    this._worker = createWorker({\r\n      logger: m => {\r\n        pb.tick(m.progress, 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  async startRecognize() {\r\n    log.configInfo(\r\n      `User [${this._userName}] has started converting file [${this._fileName}]`\r\n    );\r\n    await this._worker.load();\r\n    await this._worker.loadLanguage(this._language);\r\n    await this._worker.initialize(this._language);\r\n    const {\r\n      data: { text }\r\n    } = await this._worker.recognize(Buffer.from(this.image, 'base64'));\r\n    this.text = text;\r\n    await this._worker.terminate();\r\n    console.info();\r\n    log.configInfo(\r\n      `User [${this._userName}] has ended converting file [${this._fileName}]`\r\n    );\r\n  }\r\n\r\n  initProperties() {\r\n    this.language = 'pol';\r\n    this.text = '';\r\n    this.userName = '';\r\n    this.fileName = '';\r\n    this.image = '';\r\n    this.createWorker();\r\n  }\r\n\r\n  set language(language) {\r\n    this._language = language;\r\n  }\r\n\r\n  set text(text) {\r\n    this._text = text;\r\n  }\r\n\r\n  set image(image) {\r\n    this._image = image;\r\n  }\r\n\r\n  set fileName(fileN) {\r\n    this._fileName = fileN;\r\n  }\r\n\r\n  set userName(userN) {\r\n    this._userName = userN;\r\n  }\r\n\r\n  get language() {\r\n    return this._language;\r\n  }\r\n\r\n  get text() {\r\n    return this._text;\r\n  }\r\n\r\n  get image() {\r\n    return this._image;\r\n  }\r\n\r\n  get fileName() {\r\n    return this._fileName;\r\n  }\r\n\r\n  get userName() {\r\n    return this._userName;\r\n  }\r\n}\r\n"],"file":"ocr.js"}