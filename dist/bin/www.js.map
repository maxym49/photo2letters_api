{"version":3,"sources":["../../src/bin/www.js"],"names":["config","require","app","debug","http","readline","port","process","env","PORT","set","server","createServer","listen","on","onError","onListening","normalizePort","val","parseInt","isNaN","error","syscall","bind","code","console","exit","rl","createInterface","input","stdin","output","stdout","question","answer","close","addr","address","info"],"mappings":"AAAA;;AAEA;;;;;AAIA,IAAMA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAAtB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,QAAD,CAAnB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAAP,CAAiB,0BAAjB,CAAd;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMI,QAAQ,GAAGJ,OAAO,CAAC,UAAD,CAAxB;AAEA;;;;;AAIA,IAAMK,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACAP,GAAG,CAACQ,GAAJ,CAAQ,MAAR,EAAgBJ,IAAhB;AAEA;;;;AAIA,IAAMK,MAAM,GAAGP,IAAI,CAACQ,YAAL,CAAkBV,GAAlB,CAAf;AAEA;;;;AAIAS,MAAM,CAACE,MAAP,CAAcP,IAAd;AACAK,MAAM,CAACG,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAJ,MAAM,CAACG,EAAP,CAAU,WAAV,EAAuBE,WAAvB;AAEA;;;;AAIA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B,MAAMZ,IAAI,GAAGa,QAAQ,CAACD,GAAD,EAAM,EAAN,CAArB;;AAEA,MAAIE,KAAK,CAACd,IAAD,CAAT,EAAiB;AACf;AACA,WAAOY,GAAP;AACD;;AAED,MAAIZ,IAAI,IAAI,CAAZ,EAAe;AACb;AACA,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD;AAED;;;;;AAIA,SAASS,OAAT,CAAiBM,KAAjB,EAAwB;AACtB,MAAIA,KAAK,CAACC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AAED,MAAME,IAAI,GAAG,OAAOjB,IAAP,KAAgB,QAAhB,GAA2B,UAAUA,IAArC,GAA4C,UAAUA,IAAnE,CALsB,CAOtB;;AACA,UAAQe,KAAK,CAACG,IAAd;AACE,SAAK,QAAL;AACEC,MAAAA,OAAO,CAACJ,KAAR,CAAcE,IAAI,GAAG,+BAArB;AACAhB,MAAAA,OAAO,CAACmB,IAAR,CAAa,CAAb;AACA;;AACF,SAAK,YAAL;AACED,MAAAA,OAAO,CAACJ,KAAR,CAAcE,IAAI,GAAG,oBAArB;AACA,UAAMI,EAAE,GAAGtB,QAAQ,CAACuB,eAAT,CAAyB;AAClCC,QAAAA,KAAK,EAAEtB,OAAO,CAACuB,KADmB;AAElCC,QAAAA,MAAM,EAAExB,OAAO,CAACyB;AAFkB,OAAzB,CAAX;AAIAL,MAAAA,EAAE,CAACM,QAAH,CAAY,mCAAZ,EAAiD,UAAAC,MAAM,EAAI;AACzDvB,QAAAA,MAAM,CAACE,MAAP,CAAcqB,MAAd;AACAP,QAAAA,EAAE,CAACQ,KAAH;AACD,OAHD;AAIA;;AACF;AACE,YAAMd,KAAN;AAjBJ;AAmBD;AAED;;;;;AAIA,SAASL,WAAT,GAAuB;AACrB,MAAMoB,IAAI,GAAGzB,MAAM,CAAC0B,OAAP,EAAb;AACA,MAAMd,IAAI,GAAG,OAAOa,IAAP,KAAgB,QAAhB,GAA2B,UAAUA,IAArC,GAA4C,UAAUA,IAAI,CAAC9B,IAAxE;AACAH,EAAAA,KAAK,CAAC,kBAAkBoB,IAAnB,CAAL;AACAE,EAAAA,OAAO,CAACa,IAAR,CAAa,mBAAb,mCAA4DF,IAAI,CAAC9B,IAAjE;AACD","sourcesContent":["#!/usr/bin/env node\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nconst config = require('../../config.js');\r\nconst app = require('../app');\r\nconst debug = require('debug')('photo2letters-api:server');\r\nconst http = require('http');\r\nconst readline = require('readline');\r\n\r\n/**\r\n * Get port from environment and store in Express.\r\n */\r\n\r\nconst port = process.env.PORT || 5000;\r\napp.set('port', port);\r\n\r\n/**\r\n * Create HTTP server.\r\n */\r\n\r\nconst server = http.createServer(app);\r\n\r\n/**\r\n * Listen on provided port, on all network interfaces.\r\n */\r\n\r\nserver.listen(port);\r\nserver.on('error', onError);\r\nserver.on('listening', onListening);\r\n\r\n/**\r\n * Normalize a port into a number, string, or false.\r\n */\r\n\r\nfunction normalizePort(val) {\r\n  const port = parseInt(val, 10);\r\n\r\n  if (isNaN(port)) {\r\n    // named pipe\r\n    return val;\r\n  }\r\n\r\n  if (port >= 0) {\r\n    // port number\r\n    return port;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Event listener for HTTP server \"error\" event.\r\n */\r\n\r\nfunction onError(error) {\r\n  if (error.syscall !== 'listen') {\r\n    throw error;\r\n  }\r\n\r\n  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;\r\n\r\n  // handle specific listen errors with friendly messages\r\n  switch (error.code) {\r\n    case 'EACCES':\r\n      console.error(bind + ' requires elevated privileges');\r\n      process.exit(1);\r\n      break;\r\n    case 'EADDRINUSE':\r\n      console.error(bind + ' is already in use');\r\n      const rl = readline.createInterface({\r\n        input: process.stdin,\r\n        output: process.stdout\r\n      });\r\n      rl.question('Please specify the port to use:\\n', answer => {\r\n        server.listen(answer);\r\n        rl.close();\r\n      });\r\n      break;\r\n    default:\r\n      throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Event listener for HTTP server \"listening\" event.\r\n */\r\n\r\nfunction onListening() {\r\n  const addr = server.address();\r\n  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;\r\n  debug('Listening on ' + bind);\r\n  console.info('\\x1b[32m%s\\x1b[0m', `App is running on port:${addr.port}`);\r\n}\r\n"],"file":"www.js"}